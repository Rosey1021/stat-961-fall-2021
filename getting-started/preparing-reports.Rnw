% (C) Brett Klamer - MIT - http://opensource.org/licenses/MIT
% Please contact me if you find any errors or make improvements
% Contact details at brettklamer.com

\documentclass[11pt,letterpaper,english,oneside]{article} % article class is a standard class
%==============================================================================
%Load Packages
%==============================================================================
\usepackage[left=1in,right=1in,top=1in,bottom=1in]{geometry} % easy page margins
\usepackage[utf8]{inputenc} % editor uses utf-8 encoding
\usepackage[T1]{fontenc} % T1 font pdf output
\usepackage{lmodern} % Latin modern roman font
\usepackage{bm, bbm} % bold and blackboard bold math symbols
\usepackage{amsmath, amsfonts, amssymb, amsthm} % math packages
\usepackage[final]{microtype} % better microtypography
\usepackage{graphicx} % for easier grahics handling
\usepackage[hidelinks, colorlinks=true, linkcolor = blue, urlcolor = blue]{hyperref} % to create hyperlinks
\usepackage{float} % tells floats to stay [H]ere!
\usepackage{mdframed} % it's better than framed. knitr uses framed so settings won't conflict
\usepackage{enumitem} % nice lists
\usepackage{fancyhdr} % nice headers
\usepackage{caption}  % to control figure and table captions

\captionsetup{width=0.9\textwidth, justification = raggedright}

%==============================================================================
% Enter name and homework title here
%==============================================================================
\author{Eugene Katsevich}
\title{Preparing homeworks and exams in STAT 961}


%==============================================================================
% Put title and author in PDF properties
%==============================================================================
\makeatletter % change interpretation of @
\hypersetup{pdftitle={\@title},pdfauthor={\@author}}


%==============================================================================
% Header settings
%==============================================================================
\pagestyle{fancy} % turns on fancy header styles
\fancyhf{} % clear all header and footer fields
\makeatletter
\lhead{\@author} % left header
\chead{\@title} % center header
\makeatother
\rhead{Page \thepage} % right header
\setlength{\headheight}{13.6pt} % fixes minor warning
\makeatother % change back interpretation of @

%==============================================================================
% List spacing
%==============================================================================
\setlist[itemize]{parsep=0em} % fix itemize spacing
\setlist[enumerate]{parsep=0em} % fix enumerate spacing

%==============================================================================
% set knitr options
%==============================================================================
% latex (change space before and after knitr kframe; based on framed package)
\setlength{\OuterFrameSep}{0.3em}
% R
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)

# inline hook to process the output of \Sexpr{} statements to just 2 digits
inline_hook <- function(x) {
  if(is.numeric(x)) x <- round(x, 2)
  paste(as.character(x), collapse=", ")
}
knit_hooks$set(inline = inline_hook)

# cache all chunks
opts_chunk$set(cache = TRUE)

# create directory for figures
if(!dir.exists("figures")){
  dir.create("figures")
}
@

\begin{document}

\maketitle

\section{Compilation}

Compile your \texttt{Rnw} file to PDF by pressing the \texttt{Compile PDF} button or using a keyboard shortcut (e.g. \texttt{Command-Shift-K} on Mac). It is convenient to place RStudio and the compiled PDF in side-by-side windows on your computer as you work. 

You may run into compilation issues for a variety of reasons. Here are a few trouble-shooting tips:
\begin{itemize}
\item Make sure you have followed all the steps in \href{https://github.com/Katsevich-Teaching/stat-961-fall-2021/blob/main/getting-started/getting-started.pdf}{getting-started.pdf}. This document may have been updated since you last saw it.
\item You might be missing necessary \texttt{R} packages. Install these using \texttt{install.packages}.
\item You may find that your PDF is not updating even though you have updated your \texttt{Rnw} file. The reason for this might have to do with caching, \texttt{knitr}'s behind-the-scenes efforts to save the outputs of code chunks to avoid re-running them. In certain cases, chunks might not be re-run even though they should be (you can read more about this \href{https://yihui.org/knitr/demo/cache/#important-notes}{here}.) To avoid this issue, make sure you save any plots or tables in the same code chunk you generate them. If you've done this and the problem persists, simply delete the \texttt{cache} folder and re-compile.
\item Your \texttt{R} code may have bugs. Usually the error message will point you to a line number where the code broke. Debug your code by stepping through it line-by-line interactively before compiling your report.
\item Your LaTeX code may have bugs. Usually the error message will point you to a line number where the code broke.  
\item If you are stuck, post on \href{https://piazza.com/class/ks4vgt5twno4b0}{Piazza} or come to office hours and the teaching staff will assist you. 
\end{itemize}

\section{Adding figures and tables to your report}

\subsection{Figures}
Suppose you write a chunk of \texttt{R} code that makes a figure:
<<message = FALSE, fig.width=2, fig.height=2, out.width = "0.35\\textwidth", cache = FALSE>>=
library(tidyverse)
test_data = tibble(x = rnorm(10), y = rnorm(10))
p =  test_data %>% ggplot(aes(x = x, y = y)) + geom_point() + theme_bw()
plot(p)
@

While the figure is displayed in your report, it comes without a caption or a label you can use to reference the figure in your text. Instead of simply plotting the figure in your code, save the figure using \texttt{ggsave} and then include it in your LaTeX code using \texttt{$\backslash$includegraphics}:
<<>>=
# create figure but don't plot it
p = test_data %>% ggplot(aes(x = x, y = y)) + geom_point() + theme_bw()
# save the figure
ggsave(plot = p, filename = "figures/test_plot.png", 
       device = "png", width = 2, height = 2)
@
\begin{verbatim}
% plot the figure using LaTeX
\begin{figure}[h!]
\centering
\includegraphics[width = 0.4\textwidth]{test_plot.png}
\caption{This is a test plot.}
\label{fig:test-plot}
\end{figure}
\end{verbatim}

\noindent This will give you Figure~\ref{fig:test-plot}, which you can then reference in your LaTeX code using \verb|\ref{fig:test-plot}|.

\begin{figure}[h!]
\centering
\includegraphics[width = 0.4\textwidth]{test_plot.png}
\caption{This is a test plot.}
\label{fig:test-plot}
\end{figure}

\clearpage

\subsection{Tables}

Creating tables follows the same paradigm, except with \verb|kableExtra::kable| and \verb|kableExtra::save_kable| replacing \verb|ggplot| and \verb|ggsave|, respectively.  For example:
<<>>=
# run a regression (or do something else to produce a table)
lm_fit = lm(y ~ x, data = test_data)

# create and save table
coef(summary(lm_fit)) %>% 
  kableExtra::kable(format = "latex", row.names = NA, 
                  booktabs = TRUE, digits = 2) %>%
  kableExtra::save_kable("figures/test_table.png")
@
\begin{verbatim}
% add table to report via LaTeX
\begin{table}[h!]
\centering
\includegraphics[width = 0.6\textwidth]{test_table.png}
\caption{Test table}
\label{tab:test-table}
\end{table}
\end{verbatim}

\noindent This will give you Table~\ref{tab:test-table}, which you can then reference in your LaTeX code using \verb|\ref{tab:test-table}|.

\begin{table}[h!]
\centering
\includegraphics[width = 0.6\textwidth]{test_table.png}
\caption{Test table}
\label{tab:test-table}
\end{table}

\section{High-quality reports}

Aside from statistical methodology and computing, another goal of STAT 961 is to teach you how to produce high-quality reports. This skill is essential to successfully communicating the results of your research, e.g. in the form of a manuscript submitted for publication. Therefore, each submitted homework and exam will be held to a high standard of presentation, which will be evaluated and will comprise a small part of your grade. Below are guidelines on producing high-quality reports, broken down by their components: text, code, figures, and tables.

\subsection{Text}

Your prose should be clear and concise. Use references to refer to equations, figures, and tables. 

\subsection{Code}

Your code should be commented and easy to read. Make sure that your code does not exceed the width of the page, like this:
<<>>=
# a line that exceeds the width of the page
tibble(x = 1:100, y = 5*x + rnorm(100, sd = 100)) %>% filter(x < 80) %>% summarise(sample_correlation = cor(x, y))
@
\noindent To avoid such long lines of code, make sure your code does not reach the vertical line in the right-hand side of your RStudio editor. Insert line breaks appropriately to make your code more readable:
<<>>=
# appropriate line breaks added
tibble(x = 1:100, y = 5*x + rnorm(100, sd = 100)) %>%  # generate data
  filter(x < 80) %>%                                   # subset data
  summarise(sample_correlation = cor(x, y))            # evaluate sample corr.
@

\subsection{Figures}

Figures are very important tools to convey information to readers, and they should be constructed thoughtfully. Please read \href{https://r4ds.had.co.nz/graphics-for-communication.html}{Chapter 28} of R for Data Science, which is a good reference for producing high-quality figures. Here we discuss some of the most important elements. 

\paragraph{Sizing.}

The \textbf{aspect ratio} (i.e. ratio of width to height) of your plots is consistent with their content; e.g. box plots are usually relatively narrow, and scatter plots often make sense with equal aspect ratios.  

The \textbf{absolute size} of your figures (passed to \texttt{ggsave} via the \texttt{width} and \texttt{height} arguments) should be such that the the text on the plot is easy to read. Consider the following three choices for the absolute sizes of the test plot from Figure~\ref{fig:test-plot}: 
<<>>=
# small
ggsave(plot = p, filename = "figures/test_plot_small.png", 
       device = "png", width = 1, height = 1)
# medium
ggsave(plot = p, filename = "figures/test_plot_medium.png", 
       device = "png", width = 2, height = 2)
# large
ggsave(plot = p, filename = "figures/test_plot_large.png", 
       device = "png", width = 5, height = 5)
@
\noindent These three choices are compared in Figure~\ref{fig:test-plot-sizes}; the small-sized plot is too cramped, the large-sized plot has axis titles and labels that are too small to read, and the medium-sized plot is about right. A good rule of thumb is that the smallest text in your plots should be roughly the same size as the text in your report.

\begin{figure}[h!]
\centering
\includegraphics[width = 0.3\textwidth]{figures/test_plot_small.png}
\includegraphics[width = 0.3\textwidth]{figures/test_plot_medium.png}
\includegraphics[width = 0.3\textwidth]{figures/test_plot_large.png}
\caption{The plot from Figure~\ref{fig:test-plot} saved as three different absolute sizes (small, medium, and large).}
\label{fig:test-plot-sizes}
\end{figure}

The \textbf{relative size} of your figures (relative to the dimensions of your report, as specified in the \verb|\includegraphics| command) should also be chosen appropriately. Compare Figures~\ref{fig:test-plot-small-relative}, \ref{fig:test-plot-medium-relative}, and \ref{fig:test-plot-large-relative}, which correspond to the following three relative sizes:
\begin{verbatim}
% small relative size
\includegraphics[width = 0.1\textwidth]{figures/test_plot.png}

% medium relative size
\includegraphics[width = 0.4\textwidth]{figures/test_plot.png}

% large relative size
\includegraphics[width = 0.8\textwidth]{figures/test_plot.png}
\end{verbatim}
The small plot is too small to see, the large plot takes up too much space, and the medium one is about right.

\begin{figure}[h!]
\centering
\includegraphics[width = 0.1\textwidth]{figures/test_plot_medium.png}
\caption{The plot from Figure~\ref{fig:test-plot} included with \texttt{width = 0.1$\backslash$textwidth}. Its relative size is too small.}
\label{fig:test-plot-small-relative}
\end{figure}

\begin{figure}[h!]
\centering
\includegraphics[width = 0.4\textwidth]{figures/test_plot_medium.png}
\caption{The plot from Figure~\ref{fig:test-plot} included with \texttt{width = 0.4$\backslash$textwidth}. Its relative size is about right.}
\label{fig:test-plot-medium-relative}
\end{figure}

\begin{figure}[h!]
\centering
\includegraphics[width = 0.8\textwidth]{figures/test_plot_medium.png}
\caption{The plot from Figure~\ref{fig:test-plot} included with \texttt{width = 0.8$\backslash$textwidth}. Its relative size is too large.}
\label{fig:test-plot-large-relative}
\end{figure}

\paragraph{Titles.}

Each plot should include informative axis and legend titles. For example, consider the code below (drawn from R4DS Chapter 28), which produces the plot in Figure~\ref{fig:cars-unlabeled}.
<<message = FALSE>>=
# a plot without clear axis and legend titles
p = mpg %>%
  ggplot(aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) + 
  theme_bw()

# save plot
ggsave(plot = p, filename = "figures/cars-unlabeled.png", 
       device = "png", width = 5, height = 3.75)
@
This is a plot of fuel efficiency versus engine displacement for various types of cars, but the axis and legend labels on the plot do not make this very clear. 
\begin{figure}[h!]
\centering
\includegraphics[width = 0.8\textwidth]{figures/cars-unlabeled.png}
\caption{A plot without clear titles.}
\label{fig:cars-unlabeled}
\end{figure}
We can easily add informative titles to this plot using \texttt{labs}, resulting in Figure~\ref{fig:cars-labeled}, which is much easier to understand. 
<<message = FALSE>>=
# a plot with clear axis and legend titles
p = mpg %>%
  ggplot(aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) + 
  labs(
    x = "Engine displacement (liters)",
    y = "Highway fuel economy (miles per gallon)",
    colour = "Car type"
  ) +
  theme_bw()

# save the plot
ggsave(plot = p, filename = "figures/cars-labeled.png", 
       device = "png", width = 5, height = 3.75)
@
\begin{figure}[h!]
\centering
\includegraphics[width = 0.8\textwidth]{figures/cars-labeled.png}
\caption{(A plot with clear axis and legend titles). Fuel efficiency generally decreases with engine size; two-seaters (sports cars) are an exception because of their light weight.}
\label{fig:cars-labeled}
\end{figure}
\noindent Plots might or might not need overall titles; often the axis titles speak for themselves and the message of the plot can be conveyed in the caption (as in Figure~\ref{fig:cars-labeled}.) To add plot titles if necessary, use \texttt{ggtitle}.

If applicable, axis titles should also include the units of measurement, e.g. liters or miles per gallon as in Figure~\ref{fig:cars-labeled}. If axis titles involve mathematical formulas, these should be typeset appropriately. The code below (drawn from R4DS Chapter 28) and Figure~\ref{fig:formulas}, which it produces, illustrate how to do this. More examples can be found at \href{https://rdrr.io/r/grDevices/plotmath.html}{\texttt{?plotmath}}.
<<>>=
# a plot illustrating how to include formulas in axis titles
p = tibble(x = runif(10), 
       y = runif(10)) %>%
  ggplot(aes(x, y)) +
  geom_point() +
  labs(x = quote(sum(x[i] ^ 2, i == 1, n)),
       y = quote(alpha + beta + frac(delta, theta))) + 
  theme_bw()

# save the plot
ggsave(plot = p, filename = "figures/fig-formulas.png", 
       device = "png", width = 2.5, height = 2.5)
@
\begin{figure}[h!]
\centering
\includegraphics[width = 0.5\textwidth]{figures/fig-formulas.png}
\caption{An illustration of using formulas in axis titles.}
\label{fig:formulas}
\end{figure}

\paragraph{Captions.}

Figures should have informative captions to help readers understand what information is displayed and how to interpret it. 

\paragraph{Layout.}

Sometimes, two or more plots make sense to present together in a single figure. This can be accomplished in two ways. If the different plots convey the same type of information but for different slices of the data, then \verb|facet_grid| and \verb|facet_wrap| are the best way of laying out these plots. For example, the code below and Figure~\ref{fig:facet-wrap} illustrates \verb|facet_wrap| for the \texttt{mpg} data used in Figures~\ref{fig:cars-unlabeled} and~\ref{fig:cars-labeled}.

<<>>=
# illustrate how to use facet_wrap to create a multi-panel plot
p = mpg %>%
  filter(class %in% 
           c("2seater", "compact", "midsize")) %>%  # select 3 classes of cars
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  facet_wrap(class ~ .) +                           # separate panels per class
  labs(
    x = "Engine displacement (liters)",
    y = "Highway fuel economy\n(miles per gallon)", # line break in axis title
  ) +
  theme_bw()

# save the plot
ggsave(plot = p, filename = "figures/facet-wrap.png", 
       device = "png", width = 5.5, height = 2.25)
@
\begin{figure}[h!]
\centering
\includegraphics[width = \textwidth]{figures/facet-wrap.png}
\caption{An illustration of using \texttt{facet\_wrap} to create a multi-panel plot.}
\label{fig:facet-wrap}
\end{figure}

If the plots convey different types of information, then they should be created separately and then concatenated together using \verb|cowplot::plot_grid|. An example is shown below and in Figure~\ref{fig:cowplot-demo}. Note that the figure caption should reference the subpanels by their labels (in this case, a and b).
<<message = FALSE>>=
# illustration of using cowplot to concatenate multiple plots

# first plot: box plot of fuel economy by car type
p1 = mpg %>%
  mutate(class =                         # re-order car classes by fuel economy
           fct_reorder(class, hwy)) %>%
  ggplot(aes(x = class, y = hwy, fill = class)) +
  geom_boxplot() +
  labs(
    x = "Car type",
    y = "Highway fuel economy\n(miles per gallon)"
  ) + 
  theme_bw() + 
  theme(legend.position = "none",        # remove legend and x axis text because 
        axis.text.x = element_blank())   #  information present in second plot

# second plot: scatter plot of fuel economy versus car type
p2 = mpg %>%
  mutate(class =                         # re-order car classes by fuel economy
           fct_reorder(class, hwy)) %>%
  ggplot(aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) + 
  labs(
    x = "Engine displacement (liters)",
    colour = "Car type"
  ) +
  theme_bw() + 
  theme(axis.title.y = element_blank())  # remove y axis title because already
                                         #  present in the first plot

# use cowplot to concatenate the two plots
p = cowplot::plot_grid(p1, p2, 
                       labels = "auto",     # generate labels for subplots
                       rel_widths = c(1,2), # specify relative widths
                       align = "h")         # how to align subplots

# save the plot
ggsave(plot = p, filename = "figures/cowplot-demo.png", 
       device = "png", width = 5, height = 2.5)
@
\begin{figure}[h!]
\centering
\includegraphics[width = \textwidth]{figures/cowplot-demo.png}
\caption{(An illustration of using \texttt{cowplot} to create a multi-panel plot.) Relationships between highway fuel economy and car type (a) and engine displacement (b). }
\label{fig:cowplot-demo}
\end{figure}

\subsection{Tables}

Tables are generally less complex than figures, but many of the principles of creating high-quality figures carry over to tables as well (e.g. choosing appropriate sizes, captions, and titles.)

\end{document}